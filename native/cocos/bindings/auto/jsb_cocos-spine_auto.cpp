// clang-format off

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

/****************************************************************************
 Copyright (c) 2022-2023 Xiamen Yaji Software Co., Ltd.

 http://www.cocos.com

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights to
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 of the Software, and to permit persons to whom the Software is furnished to do so,
 subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
****************************************************************************/

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-variable"
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-variable"
#elif defined(_MSC_VER)
#pragma warning(push)
#pragma warning(disable : 4101)
#endif


#define SWIG_STD_MOVE(OBJ) std::move(OBJ)


#include <stdio.h>


#include "bindings/jswrapper/SeApi.h"
#include "bindings/manual/jsb_conversions.h"
#include "bindings/manual/jsb_global.h"


#include "bindings/auto/jsb_assets_auto.h"
#include "bindings/auto/jsb_cocos_auto.h"
#include "bindings/auto/jsb_2d_auto.h"
#include "bindings/auto/jsb_cocos-spine_auto.h"



se::Class* __jsb_cc_cocosSpine_SpineMeshBlendInfo_class = nullptr;
se::Object* __jsb_cc_cocosSpine_SpineMeshBlendInfo_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_cocosSpine_SpineMeshBlendInfo) 

static bool js_cc_cocosSpine_SpineMeshBlendInfo_blendMode_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineMeshBlendInfo *arg1 = (cc::cocosSpine::SpineMeshBlendInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineMeshBlendInfo>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg1->blendMode, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_cocosSpine_SpineMeshBlendInfo_blendMode_set) 

static bool js_cc_cocosSpine_SpineMeshBlendInfo_blendMode_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::cocosSpine::SpineMeshBlendInfo *arg1 = (cc::cocosSpine::SpineMeshBlendInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineMeshBlendInfo>(s);
    if (nullptr == arg1) return true;
    
    ok &= nativevalue_to_se(arg1->blendMode, s.rval(), s.thisObject()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_cocosSpine_SpineMeshBlendInfo_blendMode_get) 

static bool js_cc_cocosSpine_SpineMeshBlendInfo_indexOffset_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineMeshBlendInfo *arg1 = (cc::cocosSpine::SpineMeshBlendInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineMeshBlendInfo>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg1->indexOffset, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_cocosSpine_SpineMeshBlendInfo_indexOffset_set) 

static bool js_cc_cocosSpine_SpineMeshBlendInfo_indexOffset_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::cocosSpine::SpineMeshBlendInfo *arg1 = (cc::cocosSpine::SpineMeshBlendInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineMeshBlendInfo>(s);
    if (nullptr == arg1) return true;
    
    ok &= nativevalue_to_se(arg1->indexOffset, s.rval(), s.thisObject()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_cocosSpine_SpineMeshBlendInfo_indexOffset_get) 

static bool js_cc_cocosSpine_SpineMeshBlendInfo_indexCount_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineMeshBlendInfo *arg1 = (cc::cocosSpine::SpineMeshBlendInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineMeshBlendInfo>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg1->indexCount, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_cocosSpine_SpineMeshBlendInfo_indexCount_set) 

static bool js_cc_cocosSpine_SpineMeshBlendInfo_indexCount_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::cocosSpine::SpineMeshBlendInfo *arg1 = (cc::cocosSpine::SpineMeshBlendInfo *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineMeshBlendInfo>(s);
    if (nullptr == arg1) return true;
    
    ok &= nativevalue_to_se(arg1->indexCount, s.rval(), s.thisObject()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_cocosSpine_SpineMeshBlendInfo_indexCount_get) 

static bool js_new_cc_cocosSpine_SpineMeshBlendInfo(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::cocosSpine::SpineMeshBlendInfo *result;
    result = (cc::cocosSpine::SpineMeshBlendInfo *)new cc::cocosSpine::SpineMeshBlendInfo();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_cocosSpine_SpineMeshBlendInfo, __jsb_cc_cocosSpine_SpineMeshBlendInfo_class, js_delete_cc_cocosSpine_SpineMeshBlendInfo)

static bool js_delete_cc_cocosSpine_SpineMeshBlendInfo(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_cocosSpine_SpineMeshBlendInfo) 

template<>
bool sevalue_to_native(const se::Value &from, cc::cocosSpine::SpineMeshBlendInfo * to, se::Object *ctx)
{
    assert(from.isObject());
    se::Object *json = from.toObject();
    auto* data = reinterpret_cast<cc::cocosSpine::SpineMeshBlendInfo*>(json->getPrivateData());
    if (data) {
        *to = *data;
        return true;
    }
    se::Value field;
    bool ok = true;
    
    json->getProperty("blendMode", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->blendMode), ctx);
    }
    
    
    json->getProperty("indexOffset", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->indexOffset), ctx);
    }
    
    
    json->getProperty("indexCount", &field, true);
    if (!field.isNullOrUndefined()) {
        ok &= sevalue_to_native(field, &(to->indexCount), ctx);
    }
    
    
    return ok;
}


bool js_register_cc_cocosSpine_SpineMeshBlendInfo(se::Object* obj) {
    auto* cls = se::Class::create("SpineMeshBlendInfo", obj, nullptr, _SE(js_new_cc_cocosSpine_SpineMeshBlendInfo)); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    cls->defineProperty("blendMode", _SE(js_cc_cocosSpine_SpineMeshBlendInfo_blendMode_get), _SE(js_cc_cocosSpine_SpineMeshBlendInfo_blendMode_set)); 
    cls->defineProperty("indexOffset", _SE(js_cc_cocosSpine_SpineMeshBlendInfo_indexOffset_get), _SE(js_cc_cocosSpine_SpineMeshBlendInfo_indexOffset_set)); 
    cls->defineProperty("indexCount", _SE(js_cc_cocosSpine_SpineMeshBlendInfo_indexCount_get), _SE(js_cc_cocosSpine_SpineMeshBlendInfo_indexCount_set)); 
    
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_cocosSpine_SpineMeshBlendInfo));
    
    
    cls->install();
    JSBClassType::registerClass<cc::cocosSpine::SpineMeshBlendInfo>(cls);
    
    __jsb_cc_cocosSpine_SpineMeshBlendInfo_proto = cls->getProto();
    __jsb_cc_cocosSpine_SpineMeshBlendInfo_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_cocosSpine_SpineSkeletonMeshData_class = nullptr;
se::Object* __jsb_cc_cocosSpine_SpineSkeletonMeshData_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_cocosSpine_SpineSkeletonMeshData) 

static bool js_new_cc_cocosSpine_SpineSkeletonMeshData__SWIG_0(se::State& s) // NOLINT(readability-identifier-naming)
{
    const auto& args = s.args();
    CC_UNUSED bool ok = true;
    cc::cocosSpine::SpineSkeletonMeshData *result;
    result = (cc::cocosSpine::SpineSkeletonMeshData *)new cc::cocosSpine::SpineSkeletonMeshData();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}


static bool js_new_cc_cocosSpine_SpineSkeletonMeshData__SWIG_1(se::State& s) // NOLINT(readability-identifier-naming)
{
    const auto& args = s.args();
    CC_UNUSED bool ok = true;
    uint32_t arg1 ;
    uint32_t arg2 ;
    uint32_t arg3 ;
    cc::cocosSpine::SpineSkeletonMeshData *result;
    
    ok &= sevalue_to_native(args[0], &arg1, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    ok &= sevalue_to_native(args[1], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    ok &= sevalue_to_native(args[2], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    result = (cc::cocosSpine::SpineSkeletonMeshData *)new cc::cocosSpine::SpineSkeletonMeshData(arg1,arg2,arg3);
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}


static bool js_new_cc_cocosSpine_SpineSkeletonMeshData__SWIG_2(se::State& s) // NOLINT(readability-identifier-naming)
{
    const auto& args = s.args();
    CC_UNUSED bool ok = true;
    uint32_t arg1 ;
    uint8_t *arg2 = (uint8_t *) NULL ;
    uint16_t *arg3 = (uint16_t *) NULL ;
    uint32_t arg4 ;
    uint32_t arg5 ;
    uint32_t arg6 ;
    uint32_t arg7 ;
    cc::cocosSpine::SpineSkeletonMeshData *result;
    
    ok &= sevalue_to_native(args[0], &arg1, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    ok &= sevalue_to_native(args[1], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[2], &arg3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[3], &arg4, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    ok &= sevalue_to_native(args[4], &arg5, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    ok &= sevalue_to_native(args[5], &arg6, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    ok &= sevalue_to_native(args[6], &arg7, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    result = (cc::cocosSpine::SpineSkeletonMeshData *)new cc::cocosSpine::SpineSkeletonMeshData(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}


static bool js_new_SpineSkeletonMeshData(se::State& s) // NOLINT(readability-identifier-naming)
{
    size_t argc = s.args().size();
    bool ret = false;
    
    if(argc == 0) {
        ret = js_new_cc_cocosSpine_SpineSkeletonMeshData__SWIG_0(s);
        if (ret) {
            return ret; 
        } /* reset exception and return */
    }
    
    if(argc == 3) {
        ret = js_new_cc_cocosSpine_SpineSkeletonMeshData__SWIG_1(s);
        if (ret) {
            return ret; 
        } /* reset exception and return */
    }
    
    if(argc == 7) {
        ret = js_new_cc_cocosSpine_SpineSkeletonMeshData__SWIG_2(s);
        if (ret) {
            return ret; 
        } /* reset exception and return */
    }
    
    SE_REPORT_ERROR("Illegal arguments for construction of SpineSkeletonMeshData");
    return false;
}
SE_BIND_CTOR(js_new_SpineSkeletonMeshData, __jsb_cc_cocosSpine_SpineSkeletonMeshData_class, js_delete_cc_cocosSpine_SpineSkeletonMeshData)

static bool js_delete_cc_cocosSpine_SpineSkeletonMeshData(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_cocosSpine_SpineSkeletonMeshData) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_Release(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    (arg1)->Release();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonMeshData_Release) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_vBuf_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg1->vBuf, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_cocosSpine_SpineSkeletonMeshData_vBuf_set) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_vBuf_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    
    ok &= nativevalue_to_se(arg1->vBuf, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->vBuf, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_cocosSpine_SpineSkeletonMeshData_vBuf_get) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_iBuf_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg1->iBuf, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_cocosSpine_SpineSkeletonMeshData_iBuf_set) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_iBuf_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    
    ok &= nativevalue_to_se(arg1->iBuf, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(arg1->iBuf, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_cocosSpine_SpineSkeletonMeshData_iBuf_get) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_vCount_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg1->vCount, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_cocosSpine_SpineSkeletonMeshData_vCount_set) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_vCount_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    
    ok &= nativevalue_to_se(arg1->vCount, s.rval(), s.thisObject()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_cocosSpine_SpineSkeletonMeshData_vCount_get) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_iCount_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg1->iCount, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_cocosSpine_SpineSkeletonMeshData_iCount_set) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_iCount_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    
    ok &= nativevalue_to_se(arg1->iCount, s.rval(), s.thisObject()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_cocosSpine_SpineSkeletonMeshData_iCount_get) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_byteStride_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg1->byteStride, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_cocosSpine_SpineSkeletonMeshData_byteStride_set) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_byteStride_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    
    ok &= nativevalue_to_se(arg1->byteStride, s.rval(), s.thisObject()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_cocosSpine_SpineSkeletonMeshData_byteStride_get) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_slotIndex_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg1->slotIndex, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_cocosSpine_SpineSkeletonMeshData_slotIndex_set) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_slotIndex_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    
    ok &= nativevalue_to_se(arg1->slotIndex, s.rval(), s.thisObject()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_cocosSpine_SpineSkeletonMeshData_slotIndex_get) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_blendMode_set(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg1->blendMode, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    
    return true;
}
SE_BIND_PROP_SET(js_cc_cocosSpine_SpineSkeletonMeshData_blendMode_set) 

static bool js_cc_cocosSpine_SpineSkeletonMeshData_blendMode_get(se::State& s)
{
    CC_UNUSED bool ok = true;
    cc::cocosSpine::SpineSkeletonMeshData *arg1 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonMeshData>(s);
    if (nullptr == arg1) return true;
    
    ok &= nativevalue_to_se(arg1->blendMode, s.rval(), s.thisObject()); 
    
    
    return true;
}
SE_BIND_PROP_GET(js_cc_cocosSpine_SpineSkeletonMeshData_blendMode_get) 

bool js_register_cc_cocosSpine_SpineSkeletonMeshData(se::Object* obj) {
    auto* cls = se::Class::create("SpineSkeletonMeshData", obj, nullptr, _SE(js_new_SpineSkeletonMeshData)); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    cls->defineProperty("vBuf", _SE(js_cc_cocosSpine_SpineSkeletonMeshData_vBuf_get), _SE(js_cc_cocosSpine_SpineSkeletonMeshData_vBuf_set)); 
    cls->defineProperty("iBuf", _SE(js_cc_cocosSpine_SpineSkeletonMeshData_iBuf_get), _SE(js_cc_cocosSpine_SpineSkeletonMeshData_iBuf_set)); 
    cls->defineProperty("vCount", _SE(js_cc_cocosSpine_SpineSkeletonMeshData_vCount_get), _SE(js_cc_cocosSpine_SpineSkeletonMeshData_vCount_set)); 
    cls->defineProperty("iCount", _SE(js_cc_cocosSpine_SpineSkeletonMeshData_iCount_get), _SE(js_cc_cocosSpine_SpineSkeletonMeshData_iCount_set)); 
    cls->defineProperty("byteStride", _SE(js_cc_cocosSpine_SpineSkeletonMeshData_byteStride_get), _SE(js_cc_cocosSpine_SpineSkeletonMeshData_byteStride_set)); 
    cls->defineProperty("slotIndex", _SE(js_cc_cocosSpine_SpineSkeletonMeshData_slotIndex_get), _SE(js_cc_cocosSpine_SpineSkeletonMeshData_slotIndex_set)); 
    cls->defineProperty("blendMode", _SE(js_cc_cocosSpine_SpineSkeletonMeshData_blendMode_get), _SE(js_cc_cocosSpine_SpineSkeletonMeshData_blendMode_set)); 
    
    cls->defineFunction("Release", _SE(js_cc_cocosSpine_SpineSkeletonMeshData_Release)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_cocosSpine_SpineSkeletonMeshData));
    
    
    cls->install();
    JSBClassType::registerClass<cc::cocosSpine::SpineSkeletonMeshData>(cls);
    
    __jsb_cc_cocosSpine_SpineSkeletonMeshData_proto = cls->getProto();
    __jsb_cc_cocosSpine_SpineSkeletonMeshData_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_cocosSpine_SpineSkeletonRendererUI_class = nullptr;
se::Object* __jsb_cc_cocosSpine_SpineSkeletonRendererUI_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_cocosSpine_SpineSkeletonRendererUI) 

static bool js_new_cc_cocosSpine_SpineSkeletonRendererUI(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::cocosSpine::SpineSkeletonRendererUI *result;
    result = (cc::cocosSpine::SpineSkeletonRendererUI *)new cc::cocosSpine::SpineSkeletonRendererUI();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_cocosSpine_SpineSkeletonRendererUI, __jsb_cc_cocosSpine_SpineSkeletonRendererUI_class, js_delete_cc_cocosSpine_SpineSkeletonRendererUI)

static bool js_delete_cc_cocosSpine_SpineSkeletonRendererUI(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_cocosSpine_SpineSkeletonRendererUI) 

static bool js_cc_cocosSpine_SpineSkeletonRendererUI_setRenderEntity(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonRendererUI *arg1 = (cc::cocosSpine::SpineSkeletonRendererUI *) NULL ;
    cc::RenderEntity *arg2 = (cc::RenderEntity *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonRendererUI>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->setRenderEntity(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonRendererUI_setRenderEntity) 

static bool js_cc_cocosSpine_SpineSkeletonRendererUI_updateMeshData(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonRendererUI *arg1 = (cc::cocosSpine::SpineSkeletonRendererUI *) NULL ;
    cc::cocosSpine::SpineSkeletonMeshData *arg2 = (cc::cocosSpine::SpineSkeletonMeshData *) NULL ;
    std::vector< cc::cocosSpine::SpineMeshBlendInfo > *arg3 = 0 ;
    std::vector< cc::cocosSpine::SpineMeshBlendInfo > temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonRendererUI>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg3 = &temp3;
    
    (arg1)->updateMeshData(arg2,*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonRendererUI_updateMeshData) 

static bool js_cc_cocosSpine_SpineSkeletonRendererUI_onDestroy(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonRendererUI *arg1 = (cc::cocosSpine::SpineSkeletonRendererUI *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonRendererUI>(s);
    if (nullptr == arg1) return true;
    (arg1)->onDestroy();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonRendererUI_onDestroy) 

static bool js_cc_cocosSpine_SpineSkeletonRendererUI_getMaterial(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonRendererUI *arg1 = (cc::cocosSpine::SpineSkeletonRendererUI *) NULL ;
    cc::Material *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonRendererUI>(s);
    if (nullptr == arg1) return true;
    result = (cc::Material *)((cc::cocosSpine::SpineSkeletonRendererUI const *)arg1)->getMaterial();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonRendererUI_getMaterial) 

static bool js_cc_cocosSpine_SpineSkeletonRendererUI_setMaterial(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonRendererUI *arg1 = (cc::cocosSpine::SpineSkeletonRendererUI *) NULL ;
    cc::Material *arg2 = (cc::Material *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonRendererUI>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->setMaterial(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonRendererUI_setMaterial) 

static bool js_cc_cocosSpine_SpineSkeletonRendererUI_getTexture(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonRendererUI *arg1 = (cc::cocosSpine::SpineSkeletonRendererUI *) NULL ;
    cc::Texture2D *result = 0 ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonRendererUI>(s);
    if (nullptr == arg1) return true;
    result = (cc::Texture2D *)((cc::cocosSpine::SpineSkeletonRendererUI const *)arg1)->getTexture();
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonRendererUI_getTexture) 

static bool js_cc_cocosSpine_SpineSkeletonRendererUI_setTexture(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonRendererUI *arg1 = (cc::cocosSpine::SpineSkeletonRendererUI *) NULL ;
    cc::Texture2D *arg2 = (cc::Texture2D *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonRendererUI>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->setTexture(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonRendererUI_setTexture) 

bool js_register_cc_cocosSpine_SpineSkeletonRendererUI(se::Object* obj) {
    auto* cls = se::Class::create("SpineSkeletonRendererUI", obj, nullptr, _SE(js_new_cc_cocosSpine_SpineSkeletonRendererUI)); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    
    cls->defineFunction("setRenderEntity", _SE(js_cc_cocosSpine_SpineSkeletonRendererUI_setRenderEntity)); 
    cls->defineFunction("updateMeshData", _SE(js_cc_cocosSpine_SpineSkeletonRendererUI_updateMeshData)); 
    cls->defineFunction("onDestroy", _SE(js_cc_cocosSpine_SpineSkeletonRendererUI_onDestroy)); 
    cls->defineFunction("getMaterial", _SE(js_cc_cocosSpine_SpineSkeletonRendererUI_getMaterial)); 
    cls->defineFunction("setMaterial", _SE(js_cc_cocosSpine_SpineSkeletonRendererUI_setMaterial)); 
    cls->defineFunction("getTexture", _SE(js_cc_cocosSpine_SpineSkeletonRendererUI_getTexture)); 
    cls->defineFunction("setTexture", _SE(js_cc_cocosSpine_SpineSkeletonRendererUI_setTexture)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_cocosSpine_SpineSkeletonRendererUI));
    
    
    cls->install();
    JSBClassType::registerClass<cc::cocosSpine::SpineSkeletonRendererUI>(cls);
    
    __jsb_cc_cocosSpine_SpineSkeletonRendererUI_proto = cls->getProto();
    __jsb_cc_cocosSpine_SpineSkeletonRendererUI_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_cocosSpine_SpineSkeletonUI_class = nullptr;
se::Object* __jsb_cc_cocosSpine_SpineSkeletonUI_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_cocosSpine_SpineSkeletonUI) 

static bool js_new_cc_cocosSpine_SpineSkeletonUI(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::cocosSpine::SpineSkeletonUI *result;
    result = (cc::cocosSpine::SpineSkeletonUI *)new cc::cocosSpine::SpineSkeletonUI();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_cocosSpine_SpineSkeletonUI, __jsb_cc_cocosSpine_SpineSkeletonUI_class, js_delete_cc_cocosSpine_SpineSkeletonUI)

static bool js_delete_cc_cocosSpine_SpineSkeletonUI(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_cocosSpine_SpineSkeletonUI) 

static bool js_cc_cocosSpine_SpineSkeletonUI_setSkeletonInstance(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonUI *arg1 = (cc::cocosSpine::SpineSkeletonUI *) NULL ;
    cc::cocosSpine::SpineSkeletonInstance *arg2 = (cc::cocosSpine::SpineSkeletonInstance *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonUI>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->setSkeletonInstance(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonUI_setSkeletonInstance) 

static bool js_cc_cocosSpine_SpineSkeletonUI_setSkeletonRendererer(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonUI *arg1 = (cc::cocosSpine::SpineSkeletonUI *) NULL ;
    cc::cocosSpine::SpineSkeletonRendererUI *arg2 = (cc::cocosSpine::SpineSkeletonRendererUI *) NULL ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonUI>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->setSkeletonRendererer(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonUI_setSkeletonRendererer) 

static bool js_cc_cocosSpine_SpineSkeletonUI_updateRenderData(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonUI *arg1 = (cc::cocosSpine::SpineSkeletonUI *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonUI>(s);
    if (nullptr == arg1) return true;
    (arg1)->updateRenderData();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonUI_updateRenderData) 

static bool js_cc_cocosSpine_SpineSkeletonUI_onDestroy(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonUI *arg1 = (cc::cocosSpine::SpineSkeletonUI *) NULL ;
    
    if(argc != 0) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 0);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonUI>(s);
    if (nullptr == arg1) return true;
    (arg1)->onDestroy();
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonUI_onDestroy) 

bool js_register_cc_cocosSpine_SpineSkeletonUI(se::Object* obj) {
    auto* cls = se::Class::create("SpineSkeletonUI", obj, nullptr, _SE(js_new_cc_cocosSpine_SpineSkeletonUI)); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    
    cls->defineFunction("setSkeletonInstance", _SE(js_cc_cocosSpine_SpineSkeletonUI_setSkeletonInstance)); 
    cls->defineFunction("setSkeletonRendererer", _SE(js_cc_cocosSpine_SpineSkeletonUI_setSkeletonRendererer)); 
    cls->defineFunction("updateRenderData", _SE(js_cc_cocosSpine_SpineSkeletonUI_updateRenderData)); 
    cls->defineFunction("onDestroy", _SE(js_cc_cocosSpine_SpineSkeletonUI_onDestroy)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_cocosSpine_SpineSkeletonUI));
    
    
    cls->install();
    JSBClassType::registerClass<cc::cocosSpine::SpineSkeletonUI>(cls);
    
    __jsb_cc_cocosSpine_SpineSkeletonUI_proto = cls->getProto();
    __jsb_cc_cocosSpine_SpineSkeletonUI_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}


se::Class* __jsb_cc_cocosSpine_SpineSkeletonInstance_class = nullptr;
se::Object* __jsb_cc_cocosSpine_SpineSkeletonInstance_proto = nullptr;
SE_DECLARE_FINALIZE_FUNC(js_delete_cc_cocosSpine_SpineSkeletonInstance) 

static bool js_new_cc_cocosSpine_SpineSkeletonInstance(se::State& s) // NOLINT(readability-identifier-naming)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    
    cc::cocosSpine::SpineSkeletonInstance *result;
    result = (cc::cocosSpine::SpineSkeletonInstance *)new cc::cocosSpine::SpineSkeletonInstance();
    
    
    auto *ptr = JSB_MAKE_PRIVATE_OBJECT_WITH_INSTANCE(result);
    s.thisObject()->setPrivateObject(ptr);
    return true;
}
SE_BIND_CTOR(js_new_cc_cocosSpine_SpineSkeletonInstance, __jsb_cc_cocosSpine_SpineSkeletonInstance_class, js_delete_cc_cocosSpine_SpineSkeletonInstance)

static bool js_delete_cc_cocosSpine_SpineSkeletonInstance(se::State& s)
{
    return true;
}
SE_BIND_FINALIZE_FUNC(js_delete_cc_cocosSpine_SpineSkeletonInstance) 

static bool js_cc_cocosSpine_SpineSkeletonInstance_initSkeletonData(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonInstance *arg1 = (cc::cocosSpine::SpineSkeletonInstance *) NULL ;
    ccstd::string *arg2 = 0 ;
    ccstd::string *arg3 = 0 ;
    ccstd::string temp2 ;
    ccstd::string temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonInstance>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg2 = &temp2;
    
    
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg3 = &temp3;
    
    (arg1)->initSkeletonData(*arg2,*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonInstance_initSkeletonData) 

static bool js_cc_cocosSpine_SpineSkeletonInstance_initSkeletonDataBinary(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonInstance *arg1 = (cc::cocosSpine::SpineSkeletonInstance *) NULL ;
    ccstd::string *arg2 = 0 ;
    ccstd::string *arg3 = 0 ;
    ccstd::string temp2 ;
    ccstd::string temp3 ;
    
    if(argc != 2) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 2);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonInstance>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg2 = &temp2;
    
    
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg3 = &temp3;
    
    (arg1)->initSkeletonDataBinary(*arg2,*arg3);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonInstance_initSkeletonDataBinary) 

static bool js_cc_cocosSpine_SpineSkeletonInstance_setSkin(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonInstance *arg1 = (cc::cocosSpine::SpineSkeletonInstance *) NULL ;
    ccstd::string *arg2 = 0 ;
    ccstd::string temp2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonInstance>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg2 = &temp2;
    
    (arg1)->setSkin(*arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonInstance_setSkin) 

static bool js_cc_cocosSpine_SpineSkeletonInstance_setAnimation(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonInstance *arg1 = (cc::cocosSpine::SpineSkeletonInstance *) NULL ;
    uint32_t arg2 ;
    ccstd::string *arg3 = 0 ;
    bool arg4 ;
    ccstd::string temp3 ;
    bool result;
    
    if(argc != 3) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 3);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonInstance>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    
    
    ok &= sevalue_to_native(args[1], &temp3, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg3 = &temp3;
    
    
    ok &= sevalue_to_native(args[2], &arg4);
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    result = (bool)(arg1)->setAnimation(arg2,*arg3,arg4);
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonInstance_setAnimation) 

static bool js_cc_cocosSpine_SpineSkeletonInstance_updateAnimation(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonInstance *arg1 = (cc::cocosSpine::SpineSkeletonInstance *) NULL ;
    float arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonInstance>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->updateAnimation(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonInstance_updateAnimation) 

static bool js_cc_cocosSpine_SpineSkeletonInstance_setTimeScale(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonInstance *arg1 = (cc::cocosSpine::SpineSkeletonInstance *) NULL ;
    float arg2 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonInstance>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &arg2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments"); 
    (arg1)->setTimeScale(arg2);
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonInstance_setTimeScale) 

static bool js_cc_cocosSpine_SpineSkeletonInstance_updateRenderData(se::State& s)
{
    CC_UNUSED bool ok = true;
    const auto& args = s.args();
    size_t argc = args.size();
    cc::cocosSpine::SpineSkeletonInstance *arg1 = (cc::cocosSpine::SpineSkeletonInstance *) NULL ;
    std::vector< cc::cocosSpine::SpineMeshBlendInfo > *arg2 = 0 ;
    std::vector< cc::cocosSpine::SpineMeshBlendInfo > temp2 ;
    cc::cocosSpine::SpineSkeletonMeshData *result = 0 ;
    
    if(argc != 1) {
        SE_REPORT_ERROR("wrong number of arguments: %d, was expecting %d", (int)argc, 1);
        return false;
    }
    arg1 = SE_THIS_OBJECT<cc::cocosSpine::SpineSkeletonInstance>(s);
    if (nullptr == arg1) return true;
    
    ok &= sevalue_to_native(args[0], &temp2, s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    arg2 = &temp2;
    
    result = (cc::cocosSpine::SpineSkeletonMeshData *)(arg1)->updateRenderData(*arg2);
    
    ok &= nativevalue_to_se(result, s.rval(), s.thisObject());
    SE_PRECONDITION2(ok, false, "Error processing arguments");
    SE_HOLD_RETURN_VALUE(result, s.thisObject(), s.rval()); 
    
    
    return true;
}
SE_BIND_FUNC(js_cc_cocosSpine_SpineSkeletonInstance_updateRenderData) 

bool js_register_cc_cocosSpine_SpineSkeletonInstance(se::Object* obj) {
    auto* cls = se::Class::create("SpineSkeletonInstance", obj, nullptr, _SE(js_new_cc_cocosSpine_SpineSkeletonInstance)); 
    
    cls->defineStaticProperty("__isJSB", se::Value(true), se::PropertyAttribute::READ_ONLY | se::PropertyAttribute::DONT_ENUM | se::PropertyAttribute::DONT_DELETE);
    
    cls->defineFunction("initSkeletonData", _SE(js_cc_cocosSpine_SpineSkeletonInstance_initSkeletonData)); 
    cls->defineFunction("initSkeletonDataBinary", _SE(js_cc_cocosSpine_SpineSkeletonInstance_initSkeletonDataBinary)); 
    cls->defineFunction("setSkin", _SE(js_cc_cocosSpine_SpineSkeletonInstance_setSkin)); 
    cls->defineFunction("setAnimation", _SE(js_cc_cocosSpine_SpineSkeletonInstance_setAnimation)); 
    cls->defineFunction("updateAnimation", _SE(js_cc_cocosSpine_SpineSkeletonInstance_updateAnimation)); 
    cls->defineFunction("setTimeScale", _SE(js_cc_cocosSpine_SpineSkeletonInstance_setTimeScale)); 
    cls->defineFunction("updateRenderData", _SE(js_cc_cocosSpine_SpineSkeletonInstance_updateRenderData)); 
    
    
    
    
    cls->defineFinalizeFunction(_SE(js_delete_cc_cocosSpine_SpineSkeletonInstance));
    
    
    cls->install();
    JSBClassType::registerClass<cc::cocosSpine::SpineSkeletonInstance>(cls);
    
    __jsb_cc_cocosSpine_SpineSkeletonInstance_proto = cls->getProto();
    __jsb_cc_cocosSpine_SpineSkeletonInstance_class = cls;
    se::ScriptEngine::getInstance()->clearException();
    return true;
}




bool register_all_cocosSpine(se::Object* obj) {
    // Get the ns
    se::Value nsVal;
    if (!obj->getProperty("cocosSpine", &nsVal, true))
    {
        se::HandleObject jsobj(se::Object::createPlainObject());
        nsVal.setObject(jsobj);
        obj->setProperty("cocosSpine", nsVal);
    }
    se::Object* ns = nsVal.toObject();
    /* Register classes */
    js_register_cc_cocosSpine_SpineMeshBlendInfo(ns); 
    js_register_cc_cocosSpine_SpineSkeletonMeshData(ns); 
    js_register_cc_cocosSpine_SpineSkeletonRendererUI(ns); 
    js_register_cc_cocosSpine_SpineSkeletonUI(ns); 
    js_register_cc_cocosSpine_SpineSkeletonInstance(ns); 
    
    /* Register global variables & global functions */
    
    
    
    return true;
}


#if defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__) || defined(__GNUG__)
#pragma GCC diagnostic pop
#elif defined(_MSC_VER)
#pragma warning(pop)
#endif
// clang-format on
